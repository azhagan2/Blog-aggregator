// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follow.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows(id, created_at, updated_at, user_id, feed_id)
    VALUES(
        $1,
        $2,
        $3,
        $4,
        $5
    )
    RETURNING id, created_at, updated_at, user_id, feed_id
)

SELECT a.id, a.created_at, a.updated_at, a.user_id, a.feed_id, feeds.name AS feed_name, users.name AS user_name
FROM inserted_feed_follow a 
INNER JOIN users on users.id = a.user_id
INNER JOIN feeds on feeds.id = a.feed_id
`

type CreateFeedFollowParams struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    sql.NullInt32
	FeedID    sql.NullInt32
}

type CreateFeedFollowRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    sql.NullInt32
	FeedID    sql.NullInt32
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}
