// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_post_for_user.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT posts.id, posts.created_at, posts.updated_at, title, posts.url, description, published_at, posts.feed_id, a.id, a.created_at, a.updated_at, a.user_id, a.feed_id, b.id, b.created_at, b.updated_at, name, b.url, b.user_id, last_fetched_at
FROM posts 
JOIN feed_follows a ON posts.feed_id = a.feed_id  
JOIN feeds b ON a.feed_id = b.id
WHERE a.user_id = $1
ORDER BY posts.published_at DESC
LIMIT $2
`

type GetPostsForUserParams struct {
	UserID sql.NullInt32
	Limit  int32
}

type GetPostsForUserRow struct {
	ID            int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Title         string
	Url           string
	Description   string
	PublishedAt   sql.NullTime
	FeedID        sql.NullInt32
	ID_2          int32
	CreatedAt_2   time.Time
	UpdatedAt_2   time.Time
	UserID        sql.NullInt32
	FeedID_2      sql.NullInt32
	ID_3          int32
	CreatedAt_3   time.Time
	UpdatedAt_3   time.Time
	Name          string
	Url_2         string
	UserID_2      sql.NullInt32
	LastFetchedAt sql.NullTime
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.UserID,
			&i.FeedID_2,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name,
			&i.Url_2,
			&i.UserID_2,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
